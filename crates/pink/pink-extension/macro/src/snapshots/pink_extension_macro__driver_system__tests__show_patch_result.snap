---
source: crates/pink/pink-extension/macro/src/driver_system.rs
assertion_line: 197
expression: "rustfmt_snippet::rustfmt_token_stream(&stream).unwrap()"
---
#[ink::trait_definition(namespace = "pink_system")]
pub trait System {
    #[ink(message)]
    fn get_driver(&self, name: String) -> Option<AccountId>;
    #[ink(message)]
    fn set_driver(&self, name: String, driver: AccountId);
    #[ink(message)]
    fn deploy_sidevm_to(&self, code_hash: Hash, contract_id: AccountId) -> Result<()>;
}
pub use _pink_system_impl::SystemRef;
mod _pink_system_impl {
    use super::*;
    use ink_env::call::FromAccountId;
    use ink_lang::{codegen::TraitCallForwarder, reflect::TraitDefinitionRegistry};
    use pink_extension::PinkEnvironment;
    type TraitInfo = <TraitDefinitionRegistry<PinkEnvironment> as System>::__ink_TraitInfo;
    type Forwarder = <TraitInfo as TraitCallForwarder>::Forwarder;
    pub enum SystemRef {
        Instance(AccountId),
        #[cfg(feature = "std")]
        Mock,
    }
    #[cfg(feature = "std")]
    thread_local! { static MOCK : core :: cell :: RefCell < Option < Box < dyn System < Env = PinkEnvironment , __ink_TraitInfo = TraitInfo , getDriverOutput = Option < AccountId > , setDriverOutput = () , deploySidevmToOutput = Result < () > , > , >> , > = Default :: default () ; }
    impl SystemRef {
        #[cfg(feature = "std")]
        pub fn mock_with(
            contract: impl System<
                    Env = PinkEnvironment,
                    __ink_TraitInfo = TraitInfo,
                    getDriverOutput = Option<AccountId>,
                    setDriverOutput = (),
                    deploySidevmToOutput = Result<()>,
                > + 'static,
        ) {
            MOCK.with(|x| {
                *x.borrow_mut() = Some(Box::new(contract));
            });
        }
        pub fn instance() -> Self {
            #[cfg(feature = "std")]
            if MOCK.with(|x| x.borrow_mut().is_some()) {
                return Self::Mock;
            }
            Self::Instance(pink_extension::ext().system_contract_id())
        }
    }
    impl SystemRef {
        pub fn get_driver(&self, name: String) -> Option<AccountId> {
            match self {
                SystemRef::Instance(accoutid) => {
                    let mut forwarder = Forwarder::from_account_id(*accoutid);
                    forwarder.get_driver(name)
                }
                #[cfg(feature = "std")]
                SystemRef::Mock => MOCK.with(move |x| {
                    let mut borrow = x.borrow_mut();
                    let forwarder = &mut *borrow;
                    forwarder.as_mut().unwrap().get_driver(name)
                }),
            }
        }
        pub fn set_driver(&self, name: String, driver: AccountId) {
            match self {
                SystemRef::Instance(accoutid) => {
                    let mut forwarder = Forwarder::from_account_id(*accoutid);
                    forwarder.set_driver(name, driver)
                }
                #[cfg(feature = "std")]
                SystemRef::Mock => MOCK.with(move |x| {
                    let mut borrow = x.borrow_mut();
                    let forwarder = &mut *borrow;
                    forwarder.as_mut().unwrap().set_driver(name, driver)
                }),
            }
        }
        pub fn deploy_sidevm_to(&self, code_hash: Hash, contract_id: AccountId) -> Result<()> {
            match self {
                SystemRef::Instance(accoutid) => {
                    let mut forwarder = Forwarder::from_account_id(*accoutid);
                    forwarder.deploy_sidevm_to(code_hash, contract_id)
                }
                #[cfg(feature = "std")]
                SystemRef::Mock => MOCK.with(move |x| {
                    let mut borrow = x.borrow_mut();
                    let forwarder = &mut *borrow;
                    forwarder
                        .as_mut()
                        .unwrap()
                        .deploy_sidevm_to(code_hash, contract_id)
                }),
            }
        }
    }
}

