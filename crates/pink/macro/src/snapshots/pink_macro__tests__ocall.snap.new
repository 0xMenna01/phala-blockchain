---
source: crates/pink/macro/src/tests.rs
assertion_line: 13
expression: "rustfmt_snippet::rustfmt_token_stream(&stream).unwrap()"
---
pub trait Ocall {
    fn call_slow(&self, a: i32, b: i32) -> i32;
    fn call_fi(&self, a: i32, b: i32) -> i32;
}
impl Ocall for Impl {
    pub fn call_slow(a: i32, b: i32) -> i32 {
        let inputs = (a, b);
        let ret = self.xcall(1, &inputs.encode());
        Decode::decode(&mut &ret[..]).expect("Decode failed")
    }
    pub fn call_fi(a: i32, b: i32) -> i32 {
        let inputs = (a, b);
        let ret = self.xcall(2, &inputs.encode());
        Decode::decode(&mut &ret[..]).expect("Decode failed")
    }
}
pub fn dispatch(env: &Ocall, id: u32, input: &[u8]) -> Vec<u8> {
    match id {
        1 => {
            let (a, b) = Decode::decode(&mut input).expect("Failed to decode args");
            env.call_slow(a, b).encode()
        }
        2 => {
            let (a, b) = Decode::decode(&mut input).expect("Failed to decode args");
            env.call_fi(a, b).encode()
        }
        _ => panic!("Unknown call id {id}"),
    }
}
pub fn id2name(id: u32) -> &'static str {
    match id {
        1u32 => "call_slow",
        2u32 => "call_fi",
        _ => "unknown",
    }
}

